I"ç,<h3 id="p1-p2-p3-p4-p5-p6-p7-p8"><a href="players.md">P1, P2, P3, P4, P5, P6, P7, P8</a></h3>

<h1 id="mod-functions">Mod Functions</h1>
<h3 id="add"><a href="ease.md#add">add</a></h3>
<h3 id="alias"><a href="alias.md">alias</a></h3>
<h3 id="aux"><a href="aux.md">aux</a></h3>
<h3 id="ease"><a href="ease.md">ease</a></h3>
<h3 id="func"><a href="func.md">func</a></h3>
<h3 id="node"><a href="aux.md#node">node</a></h3>
<h3 id="set"><a href="set.md">set</a></h3>

<h1 id="proxy-actors">Proxy Actors</h1>
<h3 id="pc">PC</h3>
<p>A table of proxies for the combo object. <code class="language-plaintext highlighter-rouge">PC[1]</code> holds P1â€™s combo, and <code class="language-plaintext highlighter-rouge">PC[2]</code> holds P2â€™s combo.</p>
<h3 id="pj">PJ</h3>
<p>A table of proxies for the judgment object. <code class="language-plaintext highlighter-rouge">PJ[1]</code> holds P1â€™s judgment, and <code class="language-plaintext highlighter-rouge">PJ[2]</code> holds P2â€™s combo.</p>
<h3 id="pp">PP</h3>
<p>A table of player proxies. <code class="language-plaintext highlighter-rouge">PP[1]</code> holds a P1 proxy, and <code class="language-plaintext highlighter-rouge">PP2</code> holds a P2 proxy.</p>
<h3 id="setupjudgeproxy">setupJudgeProxy</h3>
<p>This function helps set up the proxies for the judgment and combo.</p>

<h1 id="actor-helpers">Actor Helpers</h1>
<h3 id="aft">aft</h3>
<p>Yeah.</p>
<h3 id="aftsprite">aftsprite</h3>
<p>Yeah.</p>
<h3 id="sprite">sprite</h3>
<p>Yeah.</p>

<h1 id="eases">Eases</h1>
<h3 id="bell">bell</h3>
<h3 id="bounce">bounce</h3>
<h3 id="tap">tap</h3>
<h3 id="tapelastic">tapElastic</h3>
<h3 id="impulse">impulse</h3>
<h3 id="inback">inBack</h3>
<h3 id="inbounce">inBounce</h3>
<h3 id="incirc">inCirc</h3>
<h3 id="incubic">inCubic</h3>
<h3 id="inelastic">inElastic</h3>
<h3 id="inexpo">inExpo</h3>
<h3 id="inoutback">inOutBack</h3>
<h3 id="inoutbounce">inOutBounce</h3>
<h3 id="inoutcirc">inOutCirc</h3>
<h3 id="inoutcubic">inOutCubic</h3>
<h3 id="inoutelastic">inOutElastic</h3>
<h3 id="inoutexpo">inOutExpo</h3>
<h3 id="inoutquad">inOutQuad</h3>
<h3 id="inoutquart">inOutQuart</h3>
<h3 id="inoutquint">inOutQuint</h3>
<h3 id="inoutsine">inOutSine</h3>
<h3 id="inquad">inQuad</h3>
<h3 id="inquart">inQuart</h3>
<h3 id="inquint">inQuint</h3>
<h3 id="insine">inSine</h3>
<h3 id="instant">instant</h3>
<h3 id="inverse">inverse</h3>
<h3 id="linear">linear</h3>
<h3 id="outback">outBack</h3>
<h3 id="outbounce">outBounce</h3>
<h3 id="outcirc">outCirc</h3>
<h3 id="outcubic">outCubic</h3>
<h3 id="outelastic">outElastic</h3>
<h3 id="outexpo">outExpo</h3>
<h3 id="outquad">outQuad</h3>
<h3 id="outquart">outQuart</h3>
<h3 id="outquint">outQuint</h3>
<h3 id="outsine">outSine</h3>
<h3 id="pop">pop</h3>
<h3 id="popelastic">popElastic</h3>
<h3 id="pulse">pulse</h3>
<h3 id="pulseelastic">pulseElastic</h3>
<h3 id="spike">spike</h3>
<h3 id="tri">tri</h3>

<h1 id="constants">Constants</h1>
<h3 id="dh">dh</h3>
<p>The display height, in actual pixels. This is only useful for AFT stuff, because NotITG uses screen pixels for measurement.</p>
<h3 id="dw">dw</h3>
<p>The display width, in actual pixels.</p>
<h3 id="e">e</h3>
<p>Shorthand for <code class="language-plaintext highlighter-rouge">'end'</code>.</p>
<h3 id="plr">plr</h3>
<p>Write to this value to specify the player arguments for <code class="language-plaintext highlighter-rouge">set</code>, <code class="language-plaintext highlighter-rouge">ease</code>, and <code class="language-plaintext highlighter-rouge">add</code>.
Instead of reading from this variable, use the <a href="#get_plr">get_plr</a> function.</p>
<h3 id="scx">scx</h3>
<p>The X coordinate of the center of the screen measured in screen pixels. In a 4:3 aspect ratio, this will equal 320.</p>
<h3 id="scy">scy</h3>
<p>The Y coordinate of the center of the screen measured in screen pixels. In a 4:3 aspect ratio, this will equal 240.</p>
<h3 id="sh">sh</h3>
<p>The screen height, measured in screen pixels. In a 4:3 aspect ratio, this will equal 480.</p>
<h3 id="sw">sw</h3>
<p>The screen width, measured in screen pixels, In a 4:3 aspect ratio, this will equal 640.</p>

<h1 id="provided-by-lua">Provided by Lua</h1>
<p>These functions come as part of the Lua programming language. These functions are covered extensively in <a href="https://www.lua.org/manual/5.1/manual.html">the Lua Reference</a>, but a summary is provided here for convenience.</p>

<h3 id="ipairs">ipairs</h3>
<p>This function can be used in a for loop to iterate over numerical keys:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">do</span>
	<span class="c1">-- body</span>
<span class="k">end</span>
</code></pre></div></div>
<p>will iterate over the pairs <code class="language-plaintext highlighter-rouge">(1,t[1])</code>, <code class="language-plaintext highlighter-rouge">(2,t[2])</code>, Â·Â·Â·, up to the first integer key absent from the table.</p>

<h3 id="pairs">pairs</h3>
<p>This function can be used in a for loop to iterate over key, value pairs:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">do</span>
	<span class="c1">-- body</span>
<span class="k">end</span>
</code></pre></div></div>
<p>will iterate over all keyâ€“value pairs of table t.</p>

<h3 id="math">math</h3>
<p>Read about this in the <a href="https://www.lua.org/manual/5.1/manual.html#5.6">Lua Reference</a>.</p>
<h3 id="string">string</h3>
<p>Read about this in the <a href="https://www.lua.org/manual/5.1/manual.html#5.4">Lua Reference</a>.</p>
<h3 id="table">table</h3>
<p>Read about this in the <a href="https://www.lua.org/manual/5.1/manual.html#5.5">Lua Reference</a>.</p>
<h3 id="tonumber">tonumber</h3>
<h3 id="tostring">tostring</h3>
<h3 id="type">type</h3>
<h3 id="unpack">unpack</h3>
<h3 id="print">print</h3>
<p>Writes into the gameâ€™s console and logs with a message whenever it is run.
To see the log, set <code class="language-plaintext highlighter-rouge">ShowLogOutput</code> to <code class="language-plaintext highlighter-rouge">1</code> in <code class="language-plaintext highlighter-rouge">Data/Stepmania.ini</code> while the game is closed.
If a message on the screen is required, use <code class="language-plaintext highlighter-rouge">SCREENMAN:SystemMessage()</code> instead.</p>

<h1 id="additional-functions">Additional Functions</h1>
<h3 id="xero">xero</h3>
<p>Call this at the beginning of every Command for the scope to work.</p>
<h3 id="stringbuilder">stringbuilder</h3>
<p>This is kind of cool.</p>
<h3 id="stable_sort">stable_sort</h3>
<h3 id="copy">copy</h3>
<h3 id="get_plr">get_plr</h3>
<p>Reads the <code class="language-plaintext highlighter-rouge">plr</code> globalâ€™s actual value. Use this instead of directly reading the <code class="language-plaintext highlighter-rouge">plr</code> global.</p>
<h3 id="max_pn">max_pn</h3>
<p>The maximum player number that the template supports. Itâ€™s set to <code class="language-plaintext highlighter-rouge">8</code>.</p>
<h3 id="mod_buffer">mod_buffer</h3>
<p>An internal <code class="language-plaintext highlighter-rouge">stringbuilder</code> to keep track of which mods to apply. Donâ€™t use it.</p>
<h3 id="normalize_mod">normalize_mod</h3>
<p>A function to follow any aliases.</p>
<h3 id="screen_error">screen_error</h3>

<h1 id="implementation-internals">Implementation Internals</h1>
<p>This section will help navigate the template folder to see how features are implemented.</p>
<h3 id="on_command">on_command</h3>
<h3 id="begin_update_command">begin_update_command</h3>
<h3 id="update_command">update_command</h3>
<h3 id="compile_nodes">compile_nodes</h3>
<h3 id="foreground">foreground</h3>
<h3 id="perframe_data_structure">perframe_data_structure</h3>
<h3 id="__plugins">__PLUGINS</h3>
<h3 id="__call">__call</h3>
<h3 id="__index">__index</h3>

<h1 id="locals-in-templatexml">Locals in <code class="language-plaintext highlighter-rouge">template.xml</code></h1>
<p>This section is a reference for working on the template. It lists the types of all of the tables that are used in the template. This should provide some insight into how the internals work.</p>
<h3 id="aliases">aliases</h3>
<p><code class="language-plaintext highlighter-rouge">{old: string, replacement: string}</code>
The look up table for aliased mods.</p>
<h3 id="reverse_aliases">reverse_aliases</h3>
<p><code class="language-plaintext highlighter-rouge">{name: string, old: {...string}}</code>
The reverse of the <code class="language-plaintext highlighter-rouge">aliases</code> table. Shows which mods are aliased to <code class="language-plaintext highlighter-rouge">name</code>.</p>
<h3 id="eases-1">eases</h3>
<p><code class="language-plaintext highlighter-rouge">{beat: number, len: number, eas: function(number): number, percent: number, modname:string, ... , ['plr']:number, ['transient']: boolean, ['relative']: boolean}</code>
Sorted by <code class="language-plaintext highlighter-rouge">beat</code>.</p>
<h3 id="active_eases">active_eases</h3>
<p>same as <code class="language-plaintext highlighter-rouge">eases</code> table, but only ones that meet <code class="language-plaintext highlighter-rouge">beat &lt;= curbeat &lt; beat+len</code></p>
<h3 id="funcs">funcs</h3>
<p><code class="language-plaintext highlighter-rouge">{beat: number, len: number?, func: function(beat, poptions): void, ['mods']: { {[key: string]: number} * max_pn}?, ['priority']: number}</code>
sorted by priority, but negative priorities are placed after positive ones, so that <code class="language-plaintext highlighter-rouge">defer=true</code> funcs will be placed last.</p>
<h3 id="active_funcs">active_funcs</h3>
<p>same as <code class="language-plaintext highlighter-rouge">funcs</code>, but only ones that meet <code class="language-plaintext highlighter-rouge">len and (beat &lt;= curbeat &lt; beat+len)</code></p>
<h3 id="auxes">auxes</h3>
<p><code class="language-plaintext highlighter-rouge">{[key: string]: true}</code></p>
<h3 id="mods">mods</h3>
<p><code class="language-plaintext highlighter-rouge">{ {[key: string]: number} * max_pn}</code>
but only values that are going to be applied this frame</p>
<h3 id="targets">targets</h3>
<p><code class="language-plaintext highlighter-rouge">{ {[key: string]: number} * max_pn}</code>
the value that the mod will arive at once all of the currently active eases complete</p>
<h3 id="poptions">poptions</h3>
<p>behaves as if it has the type <code class="language-plaintext highlighter-rouge">{ {[key: string]: number} * max_pn}</code></p>
<h3 id="nodes">nodes</h3>
<p><code class="language-plaintext highlighter-rouge">{inputs: {...string}, out: {...string}, fn: function(?):?, ['priority']: number}</code>
sorted by priority, but negative priorities are placed after positive ones, so that <code class="language-plaintext highlighter-rouge">defer=true</code> nodes will be placed last.</p>
<h3 id="node_start">node_start</h3>
<p>A horrible amalgamation of recursive types.</p>
:ET
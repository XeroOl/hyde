I"ø0<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Scheduled Function:</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">b</span><span class="p">)}</span>
<span class="c1">-- Perframe:</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">poptions</span><span class="p">)}</span>
<span class="c1">-- Function Eases:</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">ease_fn</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)}</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">ease_fn</span><span class="p">,</span> <span class="n">percent</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)}</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">ease_fn</span><span class="p">,</span> <span class="n">begin_percent</span><span class="p">,</span> <span class="n">end_percent</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)}</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">ease_fn</span><span class="p">,</span> <span class="n">percent</span><span class="p">,</span> <span class="s1">'actor:method'</span><span class="p">}</span>
<span class="n">func</span> <span class="p">{</span><span class="n">beat</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">ease_fn</span><span class="p">,</span> <span class="n">begin_percent</span><span class="p">,</span> <span class="n">end_percent</span><span class="p">,</span> <span class="s1">'actor:method'</span><span class="p">}</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">func</code> function is used to run lua functions at certain beats in the song. <code class="language-plaintext highlighter-rouge">func</code> can be used to run a function once, or run a function at every frame in a range of beats.</p>

<h2 id="func-for-scheduled-functions"><code class="language-plaintext highlighter-rouge">func</code> for Scheduled Functions</h2>
<p>Arguments:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">beat: number</code></td>
      <td>The song beat when the function should run.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fn: function</code></td>
      <td>The function to run.</td>
    </tr>
  </tbody>
</table>

<p>The given function will run at the given beat.</p>

<p>Example:</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- writes 'hello world' to screen on beat 64</span>
<span class="n">func</span> <span class="p">{</span><span class="mi">64</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
	<span class="n">SCREENMAN</span><span class="p">:</span><span class="n">SystemMessage</span><span class="p">(</span><span class="s1">'hello world'</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>

<span class="c1">-- hides P1 on beat 32</span>
<span class="n">func</span> <span class="p">{</span><span class="mi">32</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
	<span class="n">P1</span><span class="p">:</span><span class="n">hidden</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="func-for-per-frames"><code class="language-plaintext highlighter-rouge">func</code> for Per-frames</h2>
<p>Arguments:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">beat: number</code></td>
      <td>The song beat when the function should begin being called.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len: number</code></td>
      <td>The length of beats when the function should be called.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fn: function</code></td>
      <td>The function to run every frame in the range.</td>
    </tr>
  </tbody>
</table>

<p>The given function will be called every frame within the range. This is the only variant that supports <a href="#poptions">poptions</a>.</p>

<h2 id="func-for-function-eases"><code class="language-plaintext highlighter-rouge">func</code> for Function Eases</h2>
<p>Arguments:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">beat: number</code></td>
      <td>The song beat when the function should begin being called.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">len: number</code></td>
      <td>The length of beats when the function should be called.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ease_fn: function</code></td>
      <td>The ease to use.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">start_percent?: number</code></td>
      <td>The starting value to pass to the function, or 0 by default.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">target_percent?: number</code></td>
      <td>The final value to pass to the function, or 1 by default.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">fn: function or string</code></td>
      <td>The function to run for every frame of the effect.</td>
    </tr>
  </tbody>
</table>

<p>The given function will get called repeated. The function will recieve a number, <code class="language-plaintext highlighter-rouge">p</code>, which represents the progress though the effect.
These act a lot like eases, except it runs with</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">func</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">outExpo</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
	<span class="n">P1</span><span class="p">:</span><span class="n">rotationz</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="shorthand">Shorthand</h3>
<p>For functions that are just a single method call, like the example shown above, the function definition can be replaced with a string that represents the name of the method. This string has to be: the name of an actor (matches the <code class="language-plaintext highlighter-rouge">Name=</code> of the actor or the name of the global the actor is in), a <code class="language-plaintext highlighter-rouge">:</code> character, and then the name of the method. The string will be compiled into a function. This only works for methods that accept a single float parameter.</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- equivalent to the above example</span>
<span class="n">func</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">outExpo</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">'P1:rotationz'</span><span class="p">}</span>
</code></pre></div></div>

<p>This shorthand only works for actors that are global, and only works if there‚Äôs only one method to be called. In all other cases, instead of using the shorthand, use the full syntax instead.</p>

<h2 id="persist">Persist</h2>
<p>When previewing mods in the editor, the template has to fast forward to the selected beat. The ‚Äúpersist‚Äù is the behavior of a func when being processed during this ‚Äúfast forward‚Äù phase. The persist also applies during large lag spikes, or other times where the template needs to skip over an effect instead of actually playing it. Persist can be set by using the <code class="language-plaintext highlighter-rouge">persist</code> optional parameter. If <code class="language-plaintext highlighter-rouge">persist</code> is set to true, then the function will always be called at/after the specified beat. If <code class="language-plaintext highlighter-rouge">persist</code> is set to <code class="language-plaintext highlighter-rouge">false</code>, then the func will be called at the specified beat, but skipped if the song is started past the specified beat. If <code class="language-plaintext highlighter-rouge">persist</code> is a number, then the effect will persist for that number of beats. This means that if the game ‚Äúticks‚Äù within that many beats of the specified beat, the function will be called on that beat. If not specified, the persist will be true. Persist can be specified for the Scheduled Function and Function Ease variants of <code class="language-plaintext highlighter-rouge">func</code>, but not for raw perframes.</p>

<p>Example:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- flashes the screen at beat 10, but doesn't flash the screen if the file is previewed past beat 10.</span>
<span class="c1">-- note: this doesn't work on its own. It's implied that there's also a 'screencover' actor.</span>
<span class="n">func</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
	<span class="n">screencover</span><span class="p">:</span><span class="n">diffusealpha</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">screencover</span><span class="p">:</span><span class="n">linear</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">screencover</span><span class="p">:</span><span class="n">diffusealpha</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">end</span><span class="p">,</span> <span class="n">persist</span> <span class="o">=</span> <span class="kc">false</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="poptions">Poptions</h2>
<p><code class="language-plaintext highlighter-rouge">poptions</code> is an undocumented feature that lets you read and write to the current values of of mods. It can be used instead of NotITG‚Äôs internal <code class="language-plaintext highlighter-rouge">GAMESTATE:ApplyModifiers</code> function.</p>

<p>For example: <code class="language-plaintext highlighter-rouge">GAMESTATE:ApplyModifiers('*-1 100 invert')</code> can be replaced with</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">pn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="k">do</span>
	<span class="n">poptions</span><span class="p">[</span><span class="n">pn</span><span class="p">].</span><span class="n">invert</span> <span class="o">=</span> <span class="mi">100</span>
<span class="k">end</span>
</code></pre></div></div>
:ET
I"]<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aux</span> <span class="p">{</span><span class="n">modname</span><span class="p">}</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">aux</code> function creates an auxiliary mod. The template will keep track of the value of the mod, but will not apply it to the players.</p>

<p>Arguments:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">modname: string</code></td>
      <td>The name of the mod to create.</td>
    </tr>
  </tbody>
</table>

<p>Examples:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aux</span> <span class="p">{</span><span class="s1">'blacksphere'</span><span class="p">}</span>
<span class="n">aux</span> <span class="p">{</span><span class="s1">'my_mod_1'</span><span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">aux</code> function can also take more than one modname.</p>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aux</span> <span class="p">{</span><span class="s1">'mod1'</span><span class="p">,</span> <span class="s1">'mod2'</span><span class="p">,</span> <span class="s1">'mod3'</span><span class="p">}</span>
</code></pre></div></div>

<h1 id="node">Node</h1>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">node</span> <span class="p">{</span><span class="n">modname</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="c1">-- code</span>
<span class="k">end</span><span class="p">}</span>

<span class="c1">-- alternatively</span>
<span class="n">node</span> <span class="p">{</span>
    <span class="n">modname</span><span class="p">,</span>
    <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="c1">-- code</span>
        <span class="k">return</span> <span class="n">k</span>
    <span class="k">end</span><span class="p">,</span>
    <span class="n">modname_out</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">node</code> creates a function that transforms the values of mods before they are applied every frame.
node creates a function that takes in mod values and outputs mod values.</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">modname: 1 or more strings</code></td>
      <td>The mods to take as input to the function</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">function: modnames =&gt; void or modname_out</code></td>
      <td>The function to run.</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">modname_out (optional): 0 or more strings</code></td>
      <td>The name of the mods to write back to.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<h2 id="examples">Examples</h2>
<p>Node is a very general function that can be used in different ways. These examples explore some of the ways in which node can be used.
<br /><br /></p>
<h3 id="blacksphere">Blacksphere</h3>
<p>This example shows how to create a <code class="language-plaintext highlighter-rouge">'blacksphere'</code> mod with <code class="language-plaintext highlighter-rouge">node</code>.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aux</span> <span class="p">{</span><span class="s1">'blacksphere'</span><span class="p">}</span>
<span class="n">node</span> <span class="p">{</span>
    <span class="s1">'blacksphere'</span><span class="p">,</span>
    <span class="k">function</span><span class="p">(</span><span class="n">blacksphere</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">invert</span> <span class="o">=</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span> <span class="o">*</span> <span class="nb">math.cos</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">alternate</span> <span class="o">=</span> <span class="mi">25</span> <span class="o">*</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">reverse</span> <span class="o">=</span> <span class="o">-</span><span class="mi">12</span><span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">invert</span><span class="p">,</span> <span class="n">alternate</span><span class="p">,</span> <span class="n">reverse</span>
    <span class="k">end</span><span class="p">,</span>
    <span class="s1">'invert'</span><span class="p">,</span> <span class="s1">'alternate'</span><span class="p">,</span> <span class="s1">'reverse'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Firstly, the <code class="language-plaintext highlighter-rouge">aux</code> function marks the mod <code class="language-plaintext highlighter-rouge">'blacksphere'</code> as an auxiliary mod. Then, the <code class="language-plaintext highlighter-rouge">node</code> function reads the value stored in <code class="language-plaintext highlighter-rouge">'blacksphere'</code>, and calculates and returns the amount of <code class="language-plaintext highlighter-rouge">'invert'</code>, <code class="language-plaintext highlighter-rouge">'alternate'</code>, and <code class="language-plaintext highlighter-rouge">'reverse'</code> to apply.</p>

<p>Then, the <code class="language-plaintext highlighter-rouge">'blacksphere'</code> auxiliary mod can be used:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ease</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">outExpo</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="s1">'blacksphere'</span><span class="p">}</span>
<span class="n">ease</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">outExpo</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">'blacksphere'</span><span class="p">}</span>
</code></pre></div></div>
<p>Although <code class="language-plaintext highlighter-rouge">'blacksphere'</code> uses <code class="language-plaintext highlighter-rouge">'invert'</code>, <code class="language-plaintext highlighter-rouge">'alternate'</code>, and <code class="language-plaintext highlighter-rouge">'reverse'</code>, those mods can still be used.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ease</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">linear</span><span class="p">,</span> <span class="mi">360</span><span class="p">,</span> <span class="s1">'blacksphere'</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="s1">'reverse'</span><span class="p">}</span>
</code></pre></div></div>
<p><br /><br /></p>
<h3 id="rotate-bg">Rotate BG</h3>
<p><code class="language-plaintext highlighter-rouge">node</code> can be used to bind properties of actors to auxiliary mods. In this example, the mod <code class="language-plaintext highlighter-rouge">'rotatebg'</code> is is set up to control the angle of an actor.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- In the Lua</span>
<span class="n">aux</span> <span class="p">{</span><span class="s1">'rotatebg'</span><span class="p">}</span>
<span class="n">node</span> <span class="p">{</span><span class="s1">'rotatebg'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="n">my_bg_actor</span><span class="p">:</span><span class="n">rotationz</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>

<span class="c1">-- In the XML</span>
<span class="o">&lt;</span><span class="n">Layer</span> <span class="n">Name</span> <span class="o">=</span> <span class="s2">"my_bg_actor"</span> <span class="n">File</span> <span class="o">=</span> <span class="s2">"my_background_file.png"</span><span class="o">&gt;</span>
</code></pre></div></div>
<p>Then, the <code class="language-plaintext highlighter-rouge">'rotatebg'</code> mod controls the rotation of the actor.
<br /><br /></p>
<h3 id="tornado-scaled-by-flip">Tornado scaled by Flip</h3>
<p>If a node reads and writes to the same mod, then that mod is overwritten instead of added.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">node</span> <span class="p">{</span>
    <span class="s1">'flip'</span><span class="p">,</span> <span class="s1">'tornado'</span><span class="p">,</span>
    <span class="k">function</span><span class="p">(</span><span class="n">flip</span><span class="p">,</span> <span class="n">tornado</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">flip</span> <span class="o">*</span> <span class="mi">0</span><span class="p">.</span><span class="mi">02</span><span class="p">)</span> <span class="o">*</span> <span class="n">tornado</span>
    <span class="k">end</span><span class="p">,</span>
    <span class="s1">'tornado'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /></p>
<h3 id="superpowered-counter-rotation">Superpowered Counter Rotation</h3>
<p>Here’s an example of how powerful <code class="language-plaintext highlighter-rouge">node</code> can be:
This node makes the confusionoffset mods be independent of the rotation mods.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">local</span> <span class="n">sin</span><span class="p">,</span> <span class="n">cos</span> <span class="o">=</span> <span class="nb">math.sin</span><span class="p">,</span> <span class="nb">math.cos</span>
<span class="kd">local</span> <span class="n">asin</span><span class="p">,</span> <span class="n">atan2</span> <span class="o">=</span> <span class="nb">math.sin</span><span class="p">,</span> <span class="n">math</span><span class="p">.</span><span class="n">atan2</span>
<span class="kd">local</span> <span class="n">pi</span> <span class="o">=</span> <span class="nb">math.pi</span>
<span class="n">node</span> <span class="p">{</span>
    <span class="s1">'rotationx'</span><span class="p">,</span> <span class="s1">'rotationy'</span><span class="p">,</span> <span class="s1">'rotationz'</span><span class="p">,</span>
    <span class="s1">'confusionxoffset'</span><span class="p">,</span> <span class="s1">'confusionyoffset'</span><span class="p">,</span> <span class="s1">'confusionzoffset'</span><span class="p">,</span>
    <span class="k">function</span><span class="p">(</span><span class="n">rx</span><span class="p">,</span> <span class="n">ry</span><span class="p">,</span> <span class="n">rz</span><span class="p">,</span> <span class="n">cx</span><span class="p">,</span> <span class="n">cy</span><span class="p">,</span> <span class="n">cz</span><span class="p">)</span>
        <span class="c1">-- transform axes</span>
        <span class="n">rx</span><span class="p">,</span> <span class="n">rz</span> <span class="o">=</span> <span class="n">rz</span><span class="p">,</span> <span class="n">rx</span>
        <span class="n">cx</span><span class="p">,</span> <span class="n">cz</span> <span class="o">=</span> <span class="n">cz</span><span class="p">,</span> <span class="n">cx</span>
        
        <span class="c1">-- helpers for r</span>
        <span class="kd">local</span> <span class="n">rcosx</span><span class="p">,</span> <span class="n">rcosy</span><span class="p">,</span> <span class="n">rcosz</span><span class="p">,</span> <span class="n">rsinx</span><span class="p">,</span> <span class="n">rsiny</span><span class="p">,</span> <span class="n">rsinz</span> <span class="o">=</span>
            <span class="n">cos</span><span class="p">(</span><span class="n">rx</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">ry</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">rz</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">),</span>
            <span class="n">sin</span><span class="p">(</span><span class="n">rx</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">ry</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">rz</span> <span class="o">/</span> <span class="mi">360</span> <span class="o">*</span> <span class="n">pi</span><span class="p">)</span>
        
        <span class="c1">-- r to quaternion</span>
        <span class="kd">local</span> <span class="n">ra</span><span class="p">,</span> <span class="n">rb</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">rd</span> <span class="o">=</span>
            <span class="n">rcosx</span><span class="o">*</span><span class="n">rcosy</span><span class="o">*</span><span class="n">rcosz</span><span class="o">-</span><span class="n">rsinx</span><span class="o">*</span><span class="n">rsiny</span><span class="o">*</span><span class="n">rsinz</span><span class="p">,</span>
            <span class="n">rsinx</span><span class="o">*</span><span class="n">rsiny</span><span class="o">*</span><span class="n">rcosz</span><span class="o">+</span><span class="n">rcosx</span><span class="o">*</span><span class="n">rcosy</span><span class="o">*</span><span class="n">rsinz</span><span class="p">,</span>
            <span class="n">rsinx</span><span class="o">*</span><span class="n">rcosy</span><span class="o">*</span><span class="n">rcosz</span><span class="o">+</span><span class="n">rcosx</span><span class="o">*</span><span class="n">rsiny</span><span class="o">*</span><span class="n">rsinz</span><span class="p">,</span>
            <span class="n">rcosx</span><span class="o">*</span><span class="n">rsiny</span><span class="o">*</span><span class="n">rcosz</span><span class="o">-</span><span class="n">rsinx</span><span class="o">*</span><span class="n">rcosy</span><span class="o">*</span><span class="n">rsinz</span>
        
        <span class="c1">-- helpers for c</span>
        <span class="kd">local</span> <span class="n">ccosx</span><span class="p">,</span> <span class="n">ccosy</span><span class="p">,</span> <span class="n">ccosz</span><span class="p">,</span> <span class="n">csinx</span><span class="p">,</span> <span class="n">csiny</span><span class="p">,</span> <span class="n">csinz</span> <span class="o">=</span>
            <span class="n">cos</span><span class="p">(</span><span class="n">cx</span><span class="o">/</span><span class="mi">200</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">cy</span><span class="o">/</span><span class="mi">200</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">cz</span><span class="o">/</span><span class="mi">200</span><span class="p">),</span>
            <span class="n">sin</span><span class="p">(</span><span class="n">cx</span><span class="o">/</span><span class="mi">200</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">cy</span><span class="o">/</span><span class="mi">200</span><span class="p">),</span> <span class="n">sin</span><span class="p">(</span><span class="n">cz</span><span class="o">/</span><span class="mi">200</span><span class="p">)</span>
        
        <span class="c1">-- c to quaternion</span>
        <span class="kd">local</span> <span class="n">ca</span><span class="p">,</span> <span class="n">cb</span><span class="p">,</span> <span class="n">cc</span><span class="p">,</span> <span class="n">cd</span> <span class="o">=</span>
            <span class="n">ccosx</span><span class="o">*</span><span class="n">ccosy</span><span class="o">*</span><span class="n">ccosz</span><span class="o">-</span><span class="n">csinx</span><span class="o">*</span><span class="n">csiny</span><span class="o">*</span><span class="n">csinz</span><span class="p">,</span>
            <span class="n">csinx</span><span class="o">*</span><span class="n">csiny</span><span class="o">*</span><span class="n">ccosz</span><span class="o">+</span><span class="n">ccosx</span><span class="o">*</span><span class="n">ccosy</span><span class="o">*</span><span class="n">csinz</span><span class="p">,</span>
            <span class="n">csinx</span><span class="o">*</span><span class="n">ccosy</span><span class="o">*</span><span class="n">ccosz</span><span class="o">+</span><span class="n">ccosx</span><span class="o">*</span><span class="n">csiny</span><span class="o">*</span><span class="n">csinz</span><span class="p">,</span>
            <span class="n">ccosx</span><span class="o">*</span><span class="n">csiny</span><span class="o">*</span><span class="n">ccosz</span><span class="o">-</span><span class="n">csinx</span><span class="o">*</span><span class="n">ccosy</span><span class="o">*</span><span class="n">csinz</span>
        
        <span class="c1">-- o = c * inverse(r)</span>
        <span class="kd">local</span> <span class="n">oa</span><span class="p">,</span> <span class="n">ob</span><span class="p">,</span> <span class="n">oc</span><span class="p">,</span> <span class="n">od</span> <span class="o">=</span>
            <span class="n">ca</span><span class="o">*</span><span class="n">ra</span><span class="o">+</span><span class="n">cb</span><span class="o">*</span><span class="n">rb</span><span class="o">+</span><span class="n">cc</span><span class="o">*</span><span class="n">rc</span><span class="o">+</span><span class="n">cd</span><span class="o">*</span><span class="n">rd</span><span class="p">,</span>
            <span class="o">-</span><span class="n">ca</span><span class="o">*</span><span class="n">rb</span><span class="o">+</span><span class="n">cb</span><span class="o">*</span><span class="n">ra</span><span class="o">-</span><span class="n">cc</span><span class="o">*</span><span class="n">rd</span><span class="o">+</span><span class="n">cd</span><span class="o">*</span><span class="n">rc</span><span class="p">,</span>
            <span class="o">-</span><span class="n">ca</span><span class="o">*</span><span class="n">rc</span><span class="o">+</span><span class="n">cb</span><span class="o">*</span><span class="n">rd</span><span class="o">+</span><span class="n">cc</span><span class="o">*</span><span class="n">ra</span><span class="o">-</span><span class="n">cd</span><span class="o">*</span><span class="n">rb</span><span class="p">,</span>
            <span class="o">-</span><span class="n">ca</span><span class="o">*</span><span class="n">rd</span><span class="o">-</span><span class="n">cb</span><span class="o">*</span><span class="n">rc</span><span class="o">+</span><span class="n">cc</span><span class="o">*</span><span class="n">rb</span><span class="o">+</span><span class="n">cd</span><span class="o">*</span><span class="n">ra</span>
        
        <span class="c1">-- o to euler angles</span>
        <span class="kd">local</span> <span class="n">ox</span><span class="p">,</span> <span class="n">oy</span><span class="p">,</span> <span class="n">oz</span> <span class="o">=</span>
            <span class="mi">100</span> <span class="o">*</span> <span class="n">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">oc</span><span class="o">*</span><span class="n">oa</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">ob</span><span class="o">*</span><span class="n">od</span><span class="p">,</span> <span class="mi">1</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">oc</span><span class="o">*</span><span class="n">oc</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">od</span><span class="o">*</span><span class="n">od</span><span class="p">),</span>
            <span class="mi">100</span> <span class="o">*</span> <span class="n">asin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">ob</span><span class="o">*</span><span class="n">oc</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="n">od</span><span class="o">*</span><span class="n">oa</span><span class="p">),</span>
            <span class="mi">100</span> <span class="o">*</span> <span class="n">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">ob</span><span class="o">*</span><span class="n">oa</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">oc</span><span class="o">*</span><span class="n">od</span><span class="p">,</span> <span class="mi">1</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">ob</span><span class="o">*</span><span class="n">ob</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">od</span><span class="o">*</span><span class="n">od</span><span class="p">)</span>
        
        <span class="c1">-- transform axes</span>
        <span class="n">ox</span><span class="p">,</span> <span class="n">oz</span> <span class="o">=</span> <span class="n">oz</span><span class="p">,</span> <span class="n">ox</span>
        <span class="k">return</span> <span class="n">ox</span><span class="p">,</span> <span class="n">oy</span><span class="p">,</span> <span class="n">oz</span>
    <span class="k">end</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<p><br /><br /></p>
:ET
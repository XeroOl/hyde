I"÷<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span><span class="n">modname</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">percent</span><span class="p">)</span>
    <span class="c1">-- implementation</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>
<p>The function <code class="language-plaintext highlighter-rouge">definemod</code> can be used to define custom auxiliary mods. Whenever <code class="language-plaintext highlighter-rouge">modname</code> is eased, the callback function will be called with the updated <code class="language-plaintext highlighter-rouge">percent</code>. <code class="language-plaintext highlighter-rouge">definemod</code> is useful because it lets the ease engine be used to control arbitrary non-mod behavior.</p>

<p>Arguments:</p>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">modname: string</code></td>
      <td>The name of the mod to define</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">function</code></td>
      <td>the function that is called every time the mod is changed</td>
    </tr>
  </tbody>
</table>

<p>Example:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span><span class="s1">'rotatebg'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="c1">-- rotates the actor `my_bg_actor`</span>
    <span class="n">my_bg_actor</span><span class="p">:</span><span class="n">rotationz</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>
<p>This example ties the angle of an actor to a mod named <code class="language-plaintext highlighter-rouge">'rotatebg'</code>.</p>

<h1 id="multiple-mods">Multiple Mods</h1>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span><span class="n">mod1</span><span class="p">,</span> <span class="n">mod2</span><span class="p">,</span> <span class="n">mod3</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">mod1</span><span class="p">,</span> <span class="n">mod2</span><span class="p">,</span> <span class="n">mod3</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
    <span class="c1">-- implementation</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>
<p>If an implementation needs to access multiple ease values simultaneously, then multiple mods can be listed. The function arguments match the order that the mods are listed.</p>

<p>Example:</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span><span class="s1">'actorradius'</span><span class="p">,</span> <span class="s1">'actorangle'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">my_actor</span><span class="p">:</span><span class="n">xy</span><span class="p">(</span><span class="nb">math.cos</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">,</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>
<p>This example moves an actor using multiple input mods simultaneously.</p>

<h1 id="player-specific">Player Specific</h1>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span><span class="n">mymod</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">percent</span><span class="p">,</span> <span class="n">pn</span><span class="p">)</span>
    <span class="c1">-- implementation</span>
<span class="k">end</span><span class="p">}</span>
</code></pre></div></div>
<p>Although it is rare, there are sometimes cases when a defined mod to be player specific: ie, it behaves differently depending on which player itâ€™s been applied to. To accomplish this, the callback function can take in an extra argument, which is the player number.</p>

<h1 id="write-to-mods">Write to mods</h1>
<p>Sometimes, mod definitions need to write back to other mods. This can be done by adding return values to the function. Hereâ€™s an example that implements blacksphere in terms of <code class="language-plaintext highlighter-rouge">invert</code>, <code class="language-plaintext highlighter-rouge">alternate</code>, and <code class="language-plaintext highlighter-rouge">reverse</code>.</p>
<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">definemod</span> <span class="p">{</span>
    <span class="s1">'blacksphere'</span><span class="p">,</span>
    <span class="k">function</span><span class="p">(</span><span class="n">blacksphere</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">invert</span> <span class="o">=</span> <span class="mi">50</span> <span class="o">-</span> <span class="mi">50</span> <span class="o">*</span> <span class="nb">math.cos</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">alternate</span> <span class="o">=</span> <span class="mi">25</span> <span class="o">*</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">reverse</span> <span class="o">=</span> <span class="o">-</span><span class="mi">12</span><span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">blacksphere</span> <span class="o">*</span> <span class="nb">math.pi</span> <span class="o">/</span> <span class="mi">180</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">invert</span><span class="p">,</span> <span class="n">alternate</span><span class="p">,</span> <span class="n">reverse</span>
    <span class="k">end</span><span class="p">,</span>
    <span class="s1">'invert'</span><span class="p">,</span> <span class="s1">'alternate'</span><span class="p">,</span> <span class="s1">'reverse'</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
:ET